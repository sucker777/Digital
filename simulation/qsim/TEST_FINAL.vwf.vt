// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/15/2021 21:39:32"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Poker
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Poker_vlg_sample_tst(
	CLOCK,
	P1_Race,
	P1_Roll,
	P2_Race,
	P2_Roll,
	Switch,
	sampler_tx
);
input  CLOCK;
input  P1_Race;
input  P1_Roll;
input  P2_Race;
input  P2_Roll;
input  Switch;
output sampler_tx;

reg sample;
time current_time;
always @(CLOCK or P1_Race or P1_Roll or P2_Race or P2_Roll or Switch)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Poker_vlg_check_tst (
	a,
	b,
	Buzzer,
	c,
	Current_Seg,
	d,
	DE0,
	DE1,
	DE2,
	e,
	f,
	g,
	Gcol,
	P1Score_Seg,
	P2Score_Seg,
	Random_Seg,
	Rcol,
	row,
	sampler_rx
);
input  a;
input  b;
input  Buzzer;
input  c;
input [3:0] Current_Seg;
input  d;
input  DE0;
input  DE1;
input  DE2;
input  e;
input  f;
input  g;
input [7:0] Gcol;
input [1:0] P1Score_Seg;
input [1:0] P2Score_Seg;
input [3:0] Random_Seg;
input [7:0] Rcol;
input [7:0] row;
input sampler_rx;

reg  a_expected;
reg  b_expected;
reg  Buzzer_expected;
reg  c_expected;
reg [3:0] Current_Seg_expected;
reg  d_expected;
reg  DE0_expected;
reg  DE1_expected;
reg  DE2_expected;
reg  e_expected;
reg  f_expected;
reg  g_expected;
reg [7:0] Gcol_expected;
reg [1:0] P1Score_Seg_expected;
reg [1:0] P2Score_Seg_expected;
reg [3:0] Random_Seg_expected;
reg [7:0] Rcol_expected;
reg [7:0] row_expected;

reg  a_prev;
reg  b_prev;
reg  Buzzer_prev;
reg  c_prev;
reg [3:0] Current_Seg_prev;
reg  d_prev;
reg  DE0_prev;
reg  DE1_prev;
reg  DE2_prev;
reg  e_prev;
reg  f_prev;
reg  g_prev;
reg [7:0] Gcol_prev;
reg [1:0] P1Score_Seg_prev;
reg [1:0] P2Score_Seg_prev;
reg [3:0] Random_Seg_prev;
reg [7:0] Rcol_prev;
reg [7:0] row_prev;

reg  a_expected_prev;
reg  b_expected_prev;
reg  c_expected_prev;
reg [3:0] Current_Seg_expected_prev;
reg  d_expected_prev;
reg  DE0_expected_prev;
reg  DE1_expected_prev;
reg  DE2_expected_prev;
reg  e_expected_prev;
reg  f_expected_prev;
reg  g_expected_prev;
reg [7:0] Gcol_expected_prev;
reg [1:0] P1Score_Seg_expected_prev;
reg [1:0] P2Score_Seg_expected_prev;
reg [3:0] Random_Seg_expected_prev;
reg [7:0] Rcol_expected_prev;
reg [7:0] row_expected_prev;

reg  last_a_exp;
reg  last_b_exp;
reg  last_c_exp;
reg [3:0] last_Current_Seg_exp;
reg  last_d_exp;
reg  last_DE0_exp;
reg  last_DE1_exp;
reg  last_DE2_exp;
reg  last_e_exp;
reg  last_f_exp;
reg  last_g_exp;
reg [7:0] last_Gcol_exp;
reg [1:0] last_P1Score_Seg_exp;
reg [1:0] last_P2Score_Seg_exp;
reg [3:0] last_Random_Seg_exp;
reg [7:0] last_Rcol_exp;
reg [7:0] last_row_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:18] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 18'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	b_prev = b;
	Buzzer_prev = Buzzer;
	c_prev = c;
	Current_Seg_prev = Current_Seg;
	d_prev = d;
	DE0_prev = DE0;
	DE1_prev = DE1;
	DE2_prev = DE2;
	e_prev = e;
	f_prev = f;
	g_prev = g;
	Gcol_prev = Gcol;
	P1Score_Seg_prev = P1Score_Seg;
	P2Score_Seg_prev = P2Score_Seg;
	Random_Seg_prev = Random_Seg;
	Rcol_prev = Rcol;
	row_prev = row;
end

// update expected /o prevs

always @(trigger)
begin
	a_expected_prev = a_expected;
	b_expected_prev = b_expected;
	c_expected_prev = c_expected;
	Current_Seg_expected_prev = Current_Seg_expected;
	d_expected_prev = d_expected;
	DE0_expected_prev = DE0_expected;
	DE1_expected_prev = DE1_expected;
	DE2_expected_prev = DE2_expected;
	e_expected_prev = e_expected;
	f_expected_prev = f_expected;
	g_expected_prev = g_expected;
	Gcol_expected_prev = Gcol_expected;
	P1Score_Seg_expected_prev = P1Score_Seg_expected;
	P2Score_Seg_expected_prev = P2Score_Seg_expected;
	Random_Seg_expected_prev = Random_Seg_expected;
	Rcol_expected_prev = Rcol_expected;
	row_expected_prev = row_expected;
end



// expected DE0
initial
begin
	DE0_expected = 1'bX;
end 

// expected DE1
initial
begin
	DE1_expected = 1'bX;
end 

// expected DE2
initial
begin
	DE2_expected = 1'bX;
end 

// expected a
initial
begin
	a_expected = 1'bX;
end 

// expected b
initial
begin
	b_expected = 1'bX;
end 

// expected c
initial
begin
	c_expected = 1'bX;
end 

// expected d
initial
begin
	d_expected = 1'bX;
end 

// expected e
initial
begin
	e_expected = 1'bX;
end 

// expected f
initial
begin
	f_expected = 1'bX;
end 

// expected g
initial
begin
	g_expected = 1'bX;
end 
// expected Gcol[ 7 ]
initial
begin
	Gcol_expected[7] = 1'bX;
end 
// expected Gcol[ 6 ]
initial
begin
	Gcol_expected[6] = 1'bX;
end 
// expected Gcol[ 5 ]
initial
begin
	Gcol_expected[5] = 1'bX;
end 
// expected Gcol[ 4 ]
initial
begin
	Gcol_expected[4] = 1'bX;
end 
// expected Gcol[ 3 ]
initial
begin
	Gcol_expected[3] = 1'bX;
end 
// expected Gcol[ 2 ]
initial
begin
	Gcol_expected[2] = 1'bX;
end 
// expected Gcol[ 1 ]
initial
begin
	Gcol_expected[1] = 1'bX;
end 
// expected Gcol[ 0 ]
initial
begin
	Gcol_expected[0] = 1'bX;
end 
// expected Rcol[ 7 ]
initial
begin
	Rcol_expected[7] = 1'bX;
end 
// expected Rcol[ 6 ]
initial
begin
	Rcol_expected[6] = 1'bX;
end 
// expected Rcol[ 5 ]
initial
begin
	Rcol_expected[5] = 1'bX;
end 
// expected Rcol[ 4 ]
initial
begin
	Rcol_expected[4] = 1'bX;
end 
// expected Rcol[ 3 ]
initial
begin
	Rcol_expected[3] = 1'bX;
end 
// expected Rcol[ 2 ]
initial
begin
	Rcol_expected[2] = 1'bX;
end 
// expected Rcol[ 1 ]
initial
begin
	Rcol_expected[1] = 1'bX;
end 
// expected Rcol[ 0 ]
initial
begin
	Rcol_expected[0] = 1'bX;
end 
// expected row[ 7 ]
initial
begin
	row_expected[7] = 1'bX;
end 
// expected row[ 6 ]
initial
begin
	row_expected[6] = 1'bX;
end 
// expected row[ 5 ]
initial
begin
	row_expected[5] = 1'bX;
end 
// expected row[ 4 ]
initial
begin
	row_expected[4] = 1'bX;
end 
// expected row[ 3 ]
initial
begin
	row_expected[3] = 1'bX;
end 
// expected row[ 2 ]
initial
begin
	row_expected[2] = 1'bX;
end 
// expected row[ 1 ]
initial
begin
	row_expected[1] = 1'bX;
end 
// expected row[ 0 ]
initial
begin
	row_expected[0] = 1'bX;
end 
// expected Current_Seg[ 3 ]
initial
begin
	Current_Seg_expected[3] = 1'bX;
end 
// expected Current_Seg[ 2 ]
initial
begin
	Current_Seg_expected[2] = 1'bX;
end 
// expected Current_Seg[ 1 ]
initial
begin
	Current_Seg_expected[1] = 1'bX;
end 
// expected Current_Seg[ 0 ]
initial
begin
	Current_Seg_expected[0] = 1'bX;
end 
// expected Random_Seg[ 3 ]
initial
begin
	Random_Seg_expected[3] = 1'bX;
end 
// expected Random_Seg[ 2 ]
initial
begin
	Random_Seg_expected[2] = 1'bX;
end 
// expected Random_Seg[ 1 ]
initial
begin
	Random_Seg_expected[1] = 1'bX;
end 
// expected Random_Seg[ 0 ]
initial
begin
	Random_Seg_expected[0] = 1'bX;
end 
// expected P1Score_Seg[ 1 ]
initial
begin
	P1Score_Seg_expected[1] = 1'bX;
end 
// expected P1Score_Seg[ 0 ]
initial
begin
	P1Score_Seg_expected[0] = 1'bX;
end 
// expected P2Score_Seg[ 1 ]
initial
begin
	P2Score_Seg_expected[1] = 1'bX;
end 
// expected P2Score_Seg[ 0 ]
initial
begin
	P2Score_Seg_expected[0] = 1'bX;
end 
// generate trigger
always @(a_expected or a or b_expected or b or Buzzer_expected or Buzzer or c_expected or c or Current_Seg_expected or Current_Seg or d_expected or d or DE0_expected or DE0 or DE1_expected or DE1 or DE2_expected or DE2 or e_expected or e or f_expected or f or g_expected or g or Gcol_expected or Gcol or P1Score_Seg_expected or P1Score_Seg or P2Score_Seg_expected or P2Score_Seg or Random_Seg_expected or Random_Seg or Rcol_expected or Rcol or row_expected or row)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected b = %b | expected Buzzer = %b | expected c = %b | expected Current_Seg = %b | expected d = %b | expected DE0 = %b | expected DE1 = %b | expected DE2 = %b | expected e = %b | expected f = %b | expected g = %b | expected Gcol = %b | expected P1Score_Seg = %b | expected P2Score_Seg = %b | expected Random_Seg = %b | expected Rcol = %b | expected row = %b | ",a_expected_prev,b_expected_prev,Buzzer_expected_prev,c_expected_prev,Current_Seg_expected_prev,d_expected_prev,DE0_expected_prev,DE1_expected_prev,DE2_expected_prev,e_expected_prev,f_expected_prev,g_expected_prev,Gcol_expected_prev,P1Score_Seg_expected_prev,P2Score_Seg_expected_prev,Random_Seg_expected_prev,Rcol_expected_prev,row_expected_prev);
	$display("| real a = %b | real b = %b | real Buzzer = %b | real c = %b | real Current_Seg = %b | real d = %b | real DE0 = %b | real DE1 = %b | real DE2 = %b | real e = %b | real f = %b | real g = %b | real Gcol = %b | real P1Score_Seg = %b | real P2Score_Seg = %b | real Random_Seg = %b | real Rcol = %b | real row = %b | ",a_prev,b_prev,Buzzer_prev,c_prev,Current_Seg_prev,d_prev,DE0_prev,DE1_prev,DE2_prev,e_prev,f_prev,g_prev,Gcol_prev,P1Score_Seg_prev,P2Score_Seg_prev,Random_Seg_prev,Rcol_prev,row_prev);
`endif
	if (
		( a_expected_prev !== 1'bx ) && ( a_prev !== a_expected_prev )
		&& ((a_expected_prev !== last_a_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp = a_expected_prev;
	end
	if (
		( b_expected_prev !== 1'bx ) && ( b_prev !== b_expected_prev )
		&& ((b_expected_prev !== last_b_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_b_exp = b_expected_prev;
	end
	if (
		( c_expected_prev !== 1'bx ) && ( c_prev !== c_expected_prev )
		&& ((c_expected_prev !== last_c_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_c_exp = c_expected_prev;
	end
	if (
		( Current_Seg_expected_prev[0] !== 1'bx ) && ( Current_Seg_prev[0] !== Current_Seg_expected_prev[0] )
		&& ((Current_Seg_expected_prev[0] !== last_Current_Seg_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_Seg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_Seg_expected_prev);
		$display ("     Real value = %b", Current_Seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Current_Seg_exp[0] = Current_Seg_expected_prev[0];
	end
	if (
		( Current_Seg_expected_prev[1] !== 1'bx ) && ( Current_Seg_prev[1] !== Current_Seg_expected_prev[1] )
		&& ((Current_Seg_expected_prev[1] !== last_Current_Seg_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_Seg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_Seg_expected_prev);
		$display ("     Real value = %b", Current_Seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Current_Seg_exp[1] = Current_Seg_expected_prev[1];
	end
	if (
		( Current_Seg_expected_prev[2] !== 1'bx ) && ( Current_Seg_prev[2] !== Current_Seg_expected_prev[2] )
		&& ((Current_Seg_expected_prev[2] !== last_Current_Seg_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_Seg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_Seg_expected_prev);
		$display ("     Real value = %b", Current_Seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Current_Seg_exp[2] = Current_Seg_expected_prev[2];
	end
	if (
		( Current_Seg_expected_prev[3] !== 1'bx ) && ( Current_Seg_prev[3] !== Current_Seg_expected_prev[3] )
		&& ((Current_Seg_expected_prev[3] !== last_Current_Seg_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Current_Seg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Current_Seg_expected_prev);
		$display ("     Real value = %b", Current_Seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Current_Seg_exp[3] = Current_Seg_expected_prev[3];
	end
	if (
		( d_expected_prev !== 1'bx ) && ( d_prev !== d_expected_prev )
		&& ((d_expected_prev !== last_d_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_expected_prev);
		$display ("     Real value = %b", d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_d_exp = d_expected_prev;
	end
	if (
		( DE0_expected_prev !== 1'bx ) && ( DE0_prev !== DE0_expected_prev )
		&& ((DE0_expected_prev !== last_DE0_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DE0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DE0_expected_prev);
		$display ("     Real value = %b", DE0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_DE0_exp = DE0_expected_prev;
	end
	if (
		( DE1_expected_prev !== 1'bx ) && ( DE1_prev !== DE1_expected_prev )
		&& ((DE1_expected_prev !== last_DE1_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DE1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DE1_expected_prev);
		$display ("     Real value = %b", DE1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DE1_exp = DE1_expected_prev;
	end
	if (
		( DE2_expected_prev !== 1'bx ) && ( DE2_prev !== DE2_expected_prev )
		&& ((DE2_expected_prev !== last_DE2_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DE2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DE2_expected_prev);
		$display ("     Real value = %b", DE2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_DE2_exp = DE2_expected_prev;
	end
	if (
		( e_expected_prev !== 1'bx ) && ( e_prev !== e_expected_prev )
		&& ((e_expected_prev !== last_e_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e_expected_prev);
		$display ("     Real value = %b", e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_e_exp = e_expected_prev;
	end
	if (
		( f_expected_prev !== 1'bx ) && ( f_prev !== f_expected_prev )
		&& ((f_expected_prev !== last_f_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_f_exp = f_expected_prev;
	end
	if (
		( g_expected_prev !== 1'bx ) && ( g_prev !== g_expected_prev )
		&& ((g_expected_prev !== last_g_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g_expected_prev);
		$display ("     Real value = %b", g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_g_exp = g_expected_prev;
	end
	if (
		( Gcol_expected_prev[0] !== 1'bx ) && ( Gcol_prev[0] !== Gcol_expected_prev[0] )
		&& ((Gcol_expected_prev[0] !== last_Gcol_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Gcol[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Gcol_expected_prev);
		$display ("     Real value = %b", Gcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Gcol_exp[0] = Gcol_expected_prev[0];
	end
	if (
		( Gcol_expected_prev[1] !== 1'bx ) && ( Gcol_prev[1] !== Gcol_expected_prev[1] )
		&& ((Gcol_expected_prev[1] !== last_Gcol_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Gcol[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Gcol_expected_prev);
		$display ("     Real value = %b", Gcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Gcol_exp[1] = Gcol_expected_prev[1];
	end
	if (
		( Gcol_expected_prev[2] !== 1'bx ) && ( Gcol_prev[2] !== Gcol_expected_prev[2] )
		&& ((Gcol_expected_prev[2] !== last_Gcol_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Gcol[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Gcol_expected_prev);
		$display ("     Real value = %b", Gcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Gcol_exp[2] = Gcol_expected_prev[2];
	end
	if (
		( Gcol_expected_prev[3] !== 1'bx ) && ( Gcol_prev[3] !== Gcol_expected_prev[3] )
		&& ((Gcol_expected_prev[3] !== last_Gcol_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Gcol[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Gcol_expected_prev);
		$display ("     Real value = %b", Gcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Gcol_exp[3] = Gcol_expected_prev[3];
	end
	if (
		( Gcol_expected_prev[4] !== 1'bx ) && ( Gcol_prev[4] !== Gcol_expected_prev[4] )
		&& ((Gcol_expected_prev[4] !== last_Gcol_exp[4]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Gcol[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Gcol_expected_prev);
		$display ("     Real value = %b", Gcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Gcol_exp[4] = Gcol_expected_prev[4];
	end
	if (
		( Gcol_expected_prev[5] !== 1'bx ) && ( Gcol_prev[5] !== Gcol_expected_prev[5] )
		&& ((Gcol_expected_prev[5] !== last_Gcol_exp[5]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Gcol[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Gcol_expected_prev);
		$display ("     Real value = %b", Gcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Gcol_exp[5] = Gcol_expected_prev[5];
	end
	if (
		( Gcol_expected_prev[6] !== 1'bx ) && ( Gcol_prev[6] !== Gcol_expected_prev[6] )
		&& ((Gcol_expected_prev[6] !== last_Gcol_exp[6]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Gcol[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Gcol_expected_prev);
		$display ("     Real value = %b", Gcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Gcol_exp[6] = Gcol_expected_prev[6];
	end
	if (
		( Gcol_expected_prev[7] !== 1'bx ) && ( Gcol_prev[7] !== Gcol_expected_prev[7] )
		&& ((Gcol_expected_prev[7] !== last_Gcol_exp[7]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Gcol[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Gcol_expected_prev);
		$display ("     Real value = %b", Gcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_Gcol_exp[7] = Gcol_expected_prev[7];
	end
	if (
		( P1Score_Seg_expected_prev[0] !== 1'bx ) && ( P1Score_Seg_prev[0] !== P1Score_Seg_expected_prev[0] )
		&& ((P1Score_Seg_expected_prev[0] !== last_P1Score_Seg_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P1Score_Seg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P1Score_Seg_expected_prev);
		$display ("     Real value = %b", P1Score_Seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_P1Score_Seg_exp[0] = P1Score_Seg_expected_prev[0];
	end
	if (
		( P1Score_Seg_expected_prev[1] !== 1'bx ) && ( P1Score_Seg_prev[1] !== P1Score_Seg_expected_prev[1] )
		&& ((P1Score_Seg_expected_prev[1] !== last_P1Score_Seg_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P1Score_Seg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P1Score_Seg_expected_prev);
		$display ("     Real value = %b", P1Score_Seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_P1Score_Seg_exp[1] = P1Score_Seg_expected_prev[1];
	end
	if (
		( P2Score_Seg_expected_prev[0] !== 1'bx ) && ( P2Score_Seg_prev[0] !== P2Score_Seg_expected_prev[0] )
		&& ((P2Score_Seg_expected_prev[0] !== last_P2Score_Seg_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P2Score_Seg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P2Score_Seg_expected_prev);
		$display ("     Real value = %b", P2Score_Seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_P2Score_Seg_exp[0] = P2Score_Seg_expected_prev[0];
	end
	if (
		( P2Score_Seg_expected_prev[1] !== 1'bx ) && ( P2Score_Seg_prev[1] !== P2Score_Seg_expected_prev[1] )
		&& ((P2Score_Seg_expected_prev[1] !== last_P2Score_Seg_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port P2Score_Seg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", P2Score_Seg_expected_prev);
		$display ("     Real value = %b", P2Score_Seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_P2Score_Seg_exp[1] = P2Score_Seg_expected_prev[1];
	end
	if (
		( Random_Seg_expected_prev[0] !== 1'bx ) && ( Random_Seg_prev[0] !== Random_Seg_expected_prev[0] )
		&& ((Random_Seg_expected_prev[0] !== last_Random_Seg_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Random_Seg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Random_Seg_expected_prev);
		$display ("     Real value = %b", Random_Seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Random_Seg_exp[0] = Random_Seg_expected_prev[0];
	end
	if (
		( Random_Seg_expected_prev[1] !== 1'bx ) && ( Random_Seg_prev[1] !== Random_Seg_expected_prev[1] )
		&& ((Random_Seg_expected_prev[1] !== last_Random_Seg_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Random_Seg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Random_Seg_expected_prev);
		$display ("     Real value = %b", Random_Seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Random_Seg_exp[1] = Random_Seg_expected_prev[1];
	end
	if (
		( Random_Seg_expected_prev[2] !== 1'bx ) && ( Random_Seg_prev[2] !== Random_Seg_expected_prev[2] )
		&& ((Random_Seg_expected_prev[2] !== last_Random_Seg_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Random_Seg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Random_Seg_expected_prev);
		$display ("     Real value = %b", Random_Seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Random_Seg_exp[2] = Random_Seg_expected_prev[2];
	end
	if (
		( Random_Seg_expected_prev[3] !== 1'bx ) && ( Random_Seg_prev[3] !== Random_Seg_expected_prev[3] )
		&& ((Random_Seg_expected_prev[3] !== last_Random_Seg_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Random_Seg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Random_Seg_expected_prev);
		$display ("     Real value = %b", Random_Seg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_Random_Seg_exp[3] = Random_Seg_expected_prev[3];
	end
	if (
		( Rcol_expected_prev[0] !== 1'bx ) && ( Rcol_prev[0] !== Rcol_expected_prev[0] )
		&& ((Rcol_expected_prev[0] !== last_Rcol_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rcol[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rcol_expected_prev);
		$display ("     Real value = %b", Rcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Rcol_exp[0] = Rcol_expected_prev[0];
	end
	if (
		( Rcol_expected_prev[1] !== 1'bx ) && ( Rcol_prev[1] !== Rcol_expected_prev[1] )
		&& ((Rcol_expected_prev[1] !== last_Rcol_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rcol[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rcol_expected_prev);
		$display ("     Real value = %b", Rcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Rcol_exp[1] = Rcol_expected_prev[1];
	end
	if (
		( Rcol_expected_prev[2] !== 1'bx ) && ( Rcol_prev[2] !== Rcol_expected_prev[2] )
		&& ((Rcol_expected_prev[2] !== last_Rcol_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rcol[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rcol_expected_prev);
		$display ("     Real value = %b", Rcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Rcol_exp[2] = Rcol_expected_prev[2];
	end
	if (
		( Rcol_expected_prev[3] !== 1'bx ) && ( Rcol_prev[3] !== Rcol_expected_prev[3] )
		&& ((Rcol_expected_prev[3] !== last_Rcol_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rcol[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rcol_expected_prev);
		$display ("     Real value = %b", Rcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Rcol_exp[3] = Rcol_expected_prev[3];
	end
	if (
		( Rcol_expected_prev[4] !== 1'bx ) && ( Rcol_prev[4] !== Rcol_expected_prev[4] )
		&& ((Rcol_expected_prev[4] !== last_Rcol_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rcol[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rcol_expected_prev);
		$display ("     Real value = %b", Rcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Rcol_exp[4] = Rcol_expected_prev[4];
	end
	if (
		( Rcol_expected_prev[5] !== 1'bx ) && ( Rcol_prev[5] !== Rcol_expected_prev[5] )
		&& ((Rcol_expected_prev[5] !== last_Rcol_exp[5]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rcol[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rcol_expected_prev);
		$display ("     Real value = %b", Rcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Rcol_exp[5] = Rcol_expected_prev[5];
	end
	if (
		( Rcol_expected_prev[6] !== 1'bx ) && ( Rcol_prev[6] !== Rcol_expected_prev[6] )
		&& ((Rcol_expected_prev[6] !== last_Rcol_exp[6]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rcol[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rcol_expected_prev);
		$display ("     Real value = %b", Rcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Rcol_exp[6] = Rcol_expected_prev[6];
	end
	if (
		( Rcol_expected_prev[7] !== 1'bx ) && ( Rcol_prev[7] !== Rcol_expected_prev[7] )
		&& ((Rcol_expected_prev[7] !== last_Rcol_exp[7]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Rcol[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Rcol_expected_prev);
		$display ("     Real value = %b", Rcol_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_Rcol_exp[7] = Rcol_expected_prev[7];
	end
	if (
		( row_expected_prev[0] !== 1'bx ) && ( row_prev[0] !== row_expected_prev[0] )
		&& ((row_expected_prev[0] !== last_row_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_row_exp[0] = row_expected_prev[0];
	end
	if (
		( row_expected_prev[1] !== 1'bx ) && ( row_prev[1] !== row_expected_prev[1] )
		&& ((row_expected_prev[1] !== last_row_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_row_exp[1] = row_expected_prev[1];
	end
	if (
		( row_expected_prev[2] !== 1'bx ) && ( row_prev[2] !== row_expected_prev[2] )
		&& ((row_expected_prev[2] !== last_row_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_row_exp[2] = row_expected_prev[2];
	end
	if (
		( row_expected_prev[3] !== 1'bx ) && ( row_prev[3] !== row_expected_prev[3] )
		&& ((row_expected_prev[3] !== last_row_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_row_exp[3] = row_expected_prev[3];
	end
	if (
		( row_expected_prev[4] !== 1'bx ) && ( row_prev[4] !== row_expected_prev[4] )
		&& ((row_expected_prev[4] !== last_row_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_row_exp[4] = row_expected_prev[4];
	end
	if (
		( row_expected_prev[5] !== 1'bx ) && ( row_prev[5] !== row_expected_prev[5] )
		&& ((row_expected_prev[5] !== last_row_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_row_exp[5] = row_expected_prev[5];
	end
	if (
		( row_expected_prev[6] !== 1'bx ) && ( row_prev[6] !== row_expected_prev[6] )
		&& ((row_expected_prev[6] !== last_row_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_row_exp[6] = row_expected_prev[6];
	end
	if (
		( row_expected_prev[7] !== 1'bx ) && ( row_prev[7] !== row_expected_prev[7] )
		&& ((row_expected_prev[7] !== last_row_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port row[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", row_expected_prev);
		$display ("     Real value = %b", row_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_row_exp[7] = row_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#4000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Poker_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg P1_Race;
reg P1_Roll;
reg P2_Race;
reg P2_Roll;
reg Switch;
// wires                                               
wire a;
wire b;
wire Buzzer;
wire c;
wire [3:0] Current_Seg;
wire d;
wire DE0;
wire DE1;
wire DE2;
wire e;
wire f;
wire g;
wire [7:0] Gcol;
wire [1:0] P1Score_Seg;
wire [1:0] P2Score_Seg;
wire [3:0] Random_Seg;
wire [7:0] Rcol;
wire [7:0] row;

wire sampler;                             

// assign statements (if any)                          
Poker i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.Buzzer(Buzzer),
	.c(c),
	.CLOCK(CLOCK),
	.Current_Seg(Current_Seg),
	.d(d),
	.DE0(DE0),
	.DE1(DE1),
	.DE2(DE2),
	.e(e),
	.f(f),
	.g(g),
	.Gcol(Gcol),
	.P1_Race(P1_Race),
	.P1_Roll(P1_Roll),
	.P1Score_Seg(P1Score_Seg),
	.P2_Race(P2_Race),
	.P2_Roll(P2_Roll),
	.P2Score_Seg(P2Score_Seg),
	.Random_Seg(Random_Seg),
	.Rcol(Rcol),
	.row(row),
	.Switch(Switch)
);

// Switch
initial
begin
	Switch = 1'b1;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #10000 1'b1;
	#10000;
end 

// P1_Roll
initial
begin
	P1_Roll = 1'b0;
	P1_Roll = #210000 1'b1;
	P1_Roll = #30000 1'b0;
	P1_Roll = #120000 1'b1;
	P1_Roll = #40000 1'b0;
	P1_Roll = #90000 1'b1;
	P1_Roll = #30000 1'b0;
	P1_Roll = #160000 1'b1;
	P1_Roll = #50000 1'b0;
	P1_Roll = #100000 1'b1;
	P1_Roll = #50000 1'b0;
	P1_Roll = #130000 1'b1;
	P1_Roll = #60000 1'b0;
	P1_Roll = #90000 1'b1;
	P1_Roll = #30000 1'b0;
	P1_Roll = #130000 1'b1;
	P1_Roll = #30000 1'b0;
	P1_Roll = #170000 1'b1;
	P1_Roll = #80000 1'b0;
	P1_Roll = #160000 1'b1;
	P1_Roll = #80000 1'b0;
	P1_Roll = #320000 1'b1;
	P1_Roll = #40000 1'b0;
	P1_Roll = #40000 1'b1;
	P1_Roll = #40000 1'b0;
	P1_Roll = #600000 1'b1;
	P1_Roll = #80000 1'b0;
	P1_Roll = #120000 1'b1;
	P1_Roll = #120000 1'b0;
	P1_Roll = #160000 1'b1;
	P1_Roll = #80000 1'b0;
	P1_Roll = #120000 1'b1;
	P1_Roll = #80000 1'b0;
	P1_Roll = #160000 1'b1;
	P1_Roll = #40000 1'b0;
end 

// P2_Roll
initial
begin
	P2_Roll = 1'b0;
	P2_Roll = #290000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #90000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #100000 1'b1;
	P2_Roll = #30000 1'b0;
	P2_Roll = #160000 1'b1;
	P2_Roll = #50000 1'b0;
	P2_Roll = #110000 1'b1;
	P2_Roll = #60000 1'b0;
	P2_Roll = #120000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #100000 1'b1;
	P2_Roll = #50000 1'b0;
	P2_Roll = #140000 1'b1;
	P2_Roll = #60000 1'b0;
	P2_Roll = #160000 1'b1;
	P2_Roll = #80000 1'b0;
	P2_Roll = #400000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #40000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #40000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #480000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #120000 1'b1;
	P2_Roll = #80000 1'b0;
	P2_Roll = #200000 1'b1;
	P2_Roll = #120000 1'b0;
	P2_Roll = #120000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #160000 1'b1;
	P2_Roll = #80000 1'b0;
end 

// P1_Race
initial
begin
	P1_Race = 1'b0;
	P1_Race = #1370000 1'b1;
	P1_Race = #30000 1'b0;
	P1_Race = #360000 1'b1;
	P1_Race = #40000 1'b0;
	P1_Race = #600000 1'b1;
	P1_Race = #120000 1'b0;
end 

// P2_Race
initial
begin
	P2_Race = 1'b0;
	P2_Race = #1880000 1'b1;
	P2_Race = #160000 1'b0;
end 

Poker_vlg_sample_tst tb_sample (
	.CLOCK(CLOCK),
	.P1_Race(P1_Race),
	.P1_Roll(P1_Roll),
	.P2_Race(P2_Race),
	.P2_Roll(P2_Roll),
	.Switch(Switch),
	.sampler_tx(sampler)
);

Poker_vlg_check_tst tb_out(
	.a(a),
	.b(b),
	.Buzzer(Buzzer),
	.c(c),
	.Current_Seg(Current_Seg),
	.d(d),
	.DE0(DE0),
	.DE1(DE1),
	.DE2(DE2),
	.e(e),
	.f(f),
	.g(g),
	.Gcol(Gcol),
	.P1Score_Seg(P1Score_Seg),
	.P2Score_Seg(P2Score_Seg),
	.Random_Seg(Random_Seg),
	.Rcol(Rcol),
	.row(row),
	.sampler_rx(sampler)
);
endmodule

