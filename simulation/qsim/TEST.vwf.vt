// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/15/2021 20:07:17"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Poker
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Poker_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg P1_Race;
reg P1_Roll;
reg P2_Race;
reg P2_Roll;
reg Switch;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire DE0;
wire DE1;
wire DE2;
wire e;
wire f;
wire g;
wire [7:0] Gcol;
wire [7:0] Rcol;
wire [7:0] row;

// assign statements (if any)                          
Poker i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.CLOCK(CLOCK),
	.d(d),
	.DE0(DE0),
	.DE1(DE1),
	.DE2(DE2),
	.e(e),
	.f(f),
	.g(g),
	.Gcol(Gcol),
	.P1_Race(P1_Race),
	.P1_Roll(P1_Roll),
	.P2_Race(P2_Race),
	.P2_Roll(P2_Roll),
	.Rcol(Rcol),
	.row(row),
	.Switch(Switch)
);
initial 
begin 
#4000000 $finish;
end 

// Switch
initial
begin
	Switch = 1'b1;
end 

// P1_Roll
initial
begin
	P1_Roll = 1'b0;
	P1_Roll = #210000 1'b1;
	P1_Roll = #30000 1'b0;
	P1_Roll = #120000 1'b1;
	P1_Roll = #40000 1'b0;
	P1_Roll = #90000 1'b1;
	P1_Roll = #30000 1'b0;
	P1_Roll = #160000 1'b1;
	P1_Roll = #50000 1'b0;
	P1_Roll = #100000 1'b1;
	P1_Roll = #50000 1'b0;
	P1_Roll = #130000 1'b1;
	P1_Roll = #60000 1'b0;
	P1_Roll = #90000 1'b1;
	P1_Roll = #30000 1'b0;
	P1_Roll = #130000 1'b1;
	P1_Roll = #30000 1'b0;
	P1_Roll = #170000 1'b1;
	P1_Roll = #80000 1'b0;
	P1_Roll = #160000 1'b1;
	P1_Roll = #80000 1'b0;
	P1_Roll = #320000 1'b1;
	P1_Roll = #40000 1'b0;
	P1_Roll = #40000 1'b1;
	P1_Roll = #40000 1'b0;
	P1_Roll = #600000 1'b1;
	P1_Roll = #80000 1'b0;
	P1_Roll = #120000 1'b1;
	P1_Roll = #120000 1'b0;
	P1_Roll = #160000 1'b1;
	P1_Roll = #80000 1'b0;
	P1_Roll = #120000 1'b1;
	P1_Roll = #80000 1'b0;
	P1_Roll = #160000 1'b1;
	P1_Roll = #40000 1'b0;
end 

// P2_Roll
initial
begin
	P2_Roll = 1'b0;
	P2_Roll = #290000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #90000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #100000 1'b1;
	P2_Roll = #30000 1'b0;
	P2_Roll = #160000 1'b1;
	P2_Roll = #50000 1'b0;
	P2_Roll = #110000 1'b1;
	P2_Roll = #60000 1'b0;
	P2_Roll = #120000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #100000 1'b1;
	P2_Roll = #50000 1'b0;
	P2_Roll = #140000 1'b1;
	P2_Roll = #60000 1'b0;
	P2_Roll = #160000 1'b1;
	P2_Roll = #80000 1'b0;
	P2_Roll = #400000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #40000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #40000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #480000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #120000 1'b1;
	P2_Roll = #80000 1'b0;
	P2_Roll = #200000 1'b1;
	P2_Roll = #120000 1'b0;
	P2_Roll = #120000 1'b1;
	P2_Roll = #40000 1'b0;
	P2_Roll = #160000 1'b1;
	P2_Roll = #80000 1'b0;
end 

// P1_Race
initial
begin
	P1_Race = 1'b0;
	P1_Race = #1370000 1'b1;
	P1_Race = #30000 1'b0;
	P1_Race = #360000 1'b1;
	P1_Race = #40000 1'b0;
	P1_Race = #600000 1'b1;
	P1_Race = #120000 1'b0;
end 

// P2_Race
initial
begin
	P2_Race = 1'b0;
	P2_Race = #1880000 1'b1;
	P2_Race = #160000 1'b0;
end 
initial 
begin 
#4000000 $finish;
end 
endmodule

